/* -*- c++ -*- */
/*
 * Copyright 2004,2010 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <foo_wait_vv.h>
#include <gr_io_signature.h>
#include <iostream>
using namespace std; 

/*
 * Create a new instance of foo_wait_vv and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
foo_wait_vv_sptr
foo_make_wait_vv ()
{
  return gnuradio::get_initial_sptr(new foo_wait_vv ());
}

/*
 * Specify constraints on number of input and output streams.
 * This info is used to construct the input and output signatures
 * (2nd & 3rd args to gr_block's constructor).  The input and
 * output signatures are used by the runtime system to
 * check that a valid number and type of inputs and outputs
 * are connected to this block.  In this case, we accept
 * only 1 input and 1 output.
 */
static const int MIN_IN = 1;	// mininum number of input streams
static const int MAX_IN = 1;	// maximum number of input streams
static const int MIN_OUT = 1;	// minimum number of output streams
static const int MAX_OUT = 1;	// maximum number of output streams

/*
 * The private constructor
 */
foo_wait_vv::foo_wait_vv ()
  : gr_block ("wait_vv",
		   gr_make_io_signature (MIN_IN, MAX_IN, sizeof (float) * rmg::AVG_CT),
		   gr_make_io_signature (MIN_OUT, MAX_OUT, sizeof (float) * rmg::AVG_CT))
{
}

/*
 * Our virtual destructor.
 */
foo_wait_vv::~foo_wait_vv ()
{
}

int
foo_wait_vv::general_work (int noutput_items,
			       gr_vector_int &ninput_items,
			       gr_vector_const_void_star &input_items,
			       gr_vector_void_star &output_items)
{
  /* Report the average of the preceding 1000 items of each peak. */
  const float *in = (const float *) input_items[0];
  float *out = (float *) output_items[0];
  size_t block_size = output_signature()->sizeof_stream_item (0);

  /* get tags */
  const uint64_t nread = nitems_read(0); 
  vector<gr_tag_t> tags;

  this->get_tags_in_range(tags, 
    0                               /*channel*/,
    nread                             /*start*/,
    nread + (size_t)noutput_items       /*end*/
  );

  double sum; 
  for (int i = 0; i < tags.size(); i++) {
    /* average */
    sum = 0; 
    for (int j = 0; j < rmg::AVG_CT; j++) 
      sum += in[i * block_size + j];
    sum /= rmg::AVG_CT;
    
    /* tag */
    rmg::param_t meta = boost::any_cast<rmg::param_t> (pmt_any_ref(tags[i].value));  
    min_first( &meta.avg, &sum ); 
    if ((sum - meta.avg) != 0) {
      cout << sum - meta.avg; 
      cout << " peak(" << meta.ct << ") at " << ctime(&meta.timestamp);
    }

  } 

  /* produce and consume all items in the stream. */
  memcpy(out, in, noutput_items * block_size); 
  consume_each (noutput_items);

  /* Tell runtime system how many output items we produced. */
  return noutput_items;
}
