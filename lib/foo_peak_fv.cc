/* -*- c++ -*- */
/*
 * Copyright 2004,2010 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <foo_peak_fv.h>
#include <gr_io_signature.h>
#include <iostream>
#include <string>
using namespace std;

/*
 * Create a new instance of foo_peak_fv and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
foo_peak_fv_sptr
foo_make_peak_fv (float m, float th, const char *name)
{
  return gnuradio::get_initial_sptr(new foo_peak_fv (m, th, name));
}

/*
 * Specify constraints on number of input and output streams.
 * This info is used to construct the input and output signatures
 * (2nd & 3rd args to gr_block's constructor).  The input and
 * output signatures are used by the runtime system to
 * check that a valid number and type of inputs and outputs
 * are connected to this block.  In this case, we accept
 * only 1 input and 1 output.
 */
static const int MIN_IN = 2;	// mininum number of input streams
static const int MAX_IN = 2;	// maximum number of input streams
static const int MIN_OUT = 1;	// minimum number of output streams
static const int MAX_OUT = 1;	// maximum number of output streams



/*
 * The private constructor
 */
foo_peak_fv::foo_peak_fv (float m, float th, const char *name)
  : gr_block ("peak_fv",
	      gr_make_io_signature (MIN_IN, MAX_IN, sizeof (float)),
	      gr_make_io_signature (MIN_OUT, MAX_OUT, sizeof (float) * rmg::AVG_CT))
{
  max    = m;
  thresh = th;
  peaks = 0;
  set_history (rmg::AVG_CT); 
  tag.key = pmt::pmt_string_to_symbol (name); 

}

/*
 * Our virtual destructor.
 */
foo_peak_fv::~foo_peak_fv ()
{
}

int
foo_peak_fv::general_work (int noutput_items,
			       gr_vector_int &ninput_items,
			       gr_vector_const_void_star &input_items,
			       gr_vector_void_star &output_items)
{
  /* peak above threshold for 10 consecutive items */
  const float *in =    (const float *) &((const float*)input_items[0])[history()-1];
  const float *ct_in = (const float *) &((const float*)input_items[1])[history()-1];
  assert(ninput_items[0] == ninput_items[1]); 
  const int nitems = ninput_items[0] - history() - 1; 
  float *out = (float *) output_items[0];
  size_t block_size = output_signature()->sizeof_stream_item (0);
  
  double sum;
  int peak_count = 0, produced = 0;
  for (int i = 0; i < nitems; i++) 
  {
    /* answering Todd's question. 
     * This shows that we can assume that noutput_items corresponds to the 
     * number of new data. Why? The second channel to this block should be 
     * fed by a block counting from 0 to infinity (mod 100000). This error 
     * messege will print if a chunk of numbers has been skipped. 9/25/12 */
    if ((int)ct_in[i] != 0 && (int)ct_in[i] - (int)ct_in[i-1] != 1) 
      cerr << "count not in order " << i << endl;;

    if (in[i] > (thresh * max / 100)) {       /* threshold */
      peak_count ++; 
    }

    else if (peak_count < rmg::PEAK_LENGTH) { /* squelch */
      peak_count = 0; 
    }

    else {                                    /* end of peak */
      //cout << "PEAKED!\n";
      meta.timestamp = time(NULL); 
      meta.ct = peaks++;
     
      /* average */
      sum = 0; 
      for (int j = i - rmg::AVG_CT; j < i; j++)
        sum += in[j]; 
      meta.avg = sum / rmg::AVG_CT; 
      
      /* tag */
      tag.offset = nitems_written(0) + produced; 
      tag.value  = pmt::pmt_make_any (meta);
      add_item_tag (0/*channel*/, tag); 
      peak_count = 0; 
      
      memcpy(&out[produced++], &in[i - rmg::AVG_CT], block_size);
    }
  }

  /* consume all input items, return the number of 
   * peaks detected. */
  consume_each (ninput_items[0]);
  return produced;
}
